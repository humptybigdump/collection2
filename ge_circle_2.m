function [output] = ge_circle( lat, lon, radius, varargin )
%% ge_circle( lat, lon, radius, height, varargin)
% lat, lon  decimal degree coordinates
% radius = in meters
% AuthorizedOptions = {'id',...
%                      'idTag', ...
%                      'name',...
%                      'timeStamp', ...
%                      'timeSpanStart', ...
%                      'timeSpanStop', ...
%                      'description', ...
%                      'visibility', ...
%                      'LineWidth', ...
%                      'LineColor', ...
%                      'PolyColor', ...
%                      'altitude', ...
%                      'division', ...
%                      'altitudeMode', ...
%                      'Snippet'};

AuthorizedOptions = {'id',...
                     'idTag', ...
                     'name',...
                     'description', ...
                     'timeStamp', ...
                     'timeSpanStart', ...
                     'timeSpanStop', ...
                     'visibility', ...
                     'LineWidth', ...
                     'LineColor', ...
                     'PolyColor', ...
                     'altitude', ...
                     'division', ...
                     'altitudeMode', ...
                     'Snippet'};

for k = 1:2:length(varargin(:))
    if ~strcmp(varargin{k}, AuthorizedOptions)
        error(['Unauthorized parameter name ' 39 varargin{k} 39 ' in ' 10,...
            'parameter/value passed to ' 39 mfilename 39 '.']);
    end
end
                     
                            
if( isempty( lat ) || isempty( lon ) || isempty( radius ) )
    error('empty coordinates passed to ge_circle(...).');
end


         id = 'default_circle';
      idTag = 'id';
       name = 'ge_circle';
description = '';
    timeStamp = ' ';
timeSpanStart = ' ';
 timeSpanStop = ' ';
 visibility = 1;
  LineColor = 'ffffffff';
  PolyColor = 'ffffffff';
  LineWidth = 1.0;
    Snippet = '';
   altitude = 1.0;
   division = 8;
 altitudeMode = 'clampToGround';

v = ge_parse_pairs(varargin);

for j = 1:length(v)
    eval(v{j});
end

id_chars = [ idTag '="' id '"' ];
poly_id_chars = [ idTag '="poly_' id '"' ];
name_chars = [ '<name>\n' name '\n</name>\n' ];
description_chars = [ '<description>\n<![CDATA[' description ']]>\n</description>\n' ];
visibility_chars = [ '<visibility>\n' int2str(visibility) '\n</visibility>\n' ];
lineColor_chars = [ '<color>\n' LineColor '\n</color>\n' ];
polyColor_chars = [ '<color>\n' PolyColor '\n</color>\n' ];
lineWidth_chars= [ '<width>\n' num2str(LineWidth, '%.2f') '\n</width>\n' ];
altitudeMode_chars = [ '<altitudeMode>\n' altitudeMode '\n</altitudeMode>\n' ];
snippet_chars = [ '<Snippet>' Snippet '</Snippet>\n' ];
   

if timeStamp == ' '
    timeStamp_chars = '';
else
    timeStamp_chars = [ '<TimeStamp><when>' timeStamp '</when></TimeStamp>\n' ];
end

if timeSpanStart == ' '
    timeSpan_chars = '';
else
    if timeSpanStop == ' ' 
        timeSpan_chars = [ '<TimeSpan><begin>' timeSpanStart '</begin></TimeSpan>\n' ];
    else
        timeSpan_chars = [ '<TimeSpan><begin>' timeSpanStart '</begin><end>' timeSpanStop '</end></TimeSpan>\n' ];    
    end
        
end

radius = convert2degree(radius);
division = 2 .^ division;
angle_division = 360.0 / division;


header=['<Placemark ',id_chars,'>','\n',...
    name_chars,'\n',...
    timeStamp_chars,...
    timeSpan_chars,...
    visibility_chars,'\n',...
    snippet_chars,...
    description_chars,'\n',...
    '<Style>','\n',...
        '<LineStyle>','\n',...
            lineColor_chars,'\n',...
            lineWidth_chars,'\n',...
        '</LineStyle>','\n',...
        '<PolyStyle>','\n',...
            polyColor_chars,'\n',...
        '</PolyStyle>','\n',...
    '</Style>','\n',...
  '<Polygon ',poly_id_chars,'>','\n',...
    altitudeMode_chars, ...
    '<outerBoundaryIs>','\n',...
      '<LinearRing>','\n',...
        '<coordinates>','\n',];
		
		coordinates = '';
		for i = 0:division
		
			angle = angle_division * i;
			[x, y] = vectorsplit( angle, radius );

			coordinates = [coordinates, sprintf('%.6f,%.6f,%.6f ', lon+x, lat+y, altitude)];
		
		end
		
footer=['</coordinates>','\n',...
      '</LinearRing>','\n',...
    '</outerBoundaryIs>','\n',...
  '</Polygon>','\n',...
'</Placemark>','\n',];

output = [ header, coordinates, footer ];



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% LOCAL FUNCTION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



function [output] = convert2degree(in)
%% convert2degree
% helper function that converts to decimal degree coordinates
    output = 180 * in / (6378137.0  * pi);
    
function [x, y] = vectorsplit( angle, magnitude )
% Splits the vector at angle & magnitude

alpharad = deg2rad( angle ); %[rad]  

x = sin( alpharad ) * magnitude;           
y = cos( alpharad ) * magnitude;           
          
    