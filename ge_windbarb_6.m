function [xCoordsOfBarbs,yCoordsOfBarbs] = ge_windbarb(MX,MY,MU,MV,varargin)
%% ge_windbarb( X, Y, U, V, s01, hemi)
% (MU and MV must be in m/s)
% MX, MY, MX, MY should be the same constructs as used by the quiver
% function.
% AuthorizedOptions = {'barbScale',...
%                      'hemisphere'};

AuthorizedOptions = {'barbScale',...
                     'hemisphere'};

for k = 1:2:length(varargin(:))
    if ~strcmp(varargin{k}, AuthorizedOptions)
        error(['Unauthorized parameter name ' 39 varargin{k} 39 ' in ' 10,...
            'parameter/value passed to ' 39 mfilename 39 '.']);
    end
end


    barbScale = 1;
   hemisphere = 'Auto';

v = ge_parse_pairs(varargin);

for j = 1:length(v)
    eval(v{j});
end

size_MX = size(MX);
size_MY = size(MY);
size_MU = size(MU);
size_MV = size(MV);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the following block checks whether MX 
%% and MY are both vectors
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    if length(size_MX)==2 & any(size_MX==1) 
        % MX is vector
        if length(size_MY)==2 & any(size_MY==1)
            % MY is vector
            [MX,MY] = meshgrid(MX(:),MY(:));
            size_MX = size(MX);
            size_MY = size(MY);
        else
            % MY is not vector        
            error(['Input arguments ' 39 'MX' 39 ' and ' 39 'MY' 39 ' should have ' 10 'the same dimensions. (Error generated by' 10 'function ' mfilename ').' ])
        end
    else
        % MX is not vector
        if length(size_MY)==2 & any(size_MY==1)
            % MY is vector        
            error(['Input arguments ' 39 'MX' 39 ' and ' 39 'MY' 39 ' should have ' 10 'the same dimensions. (Error generated by' 10 'function ' mfilename ').' ])
        else
            % MY is not vector        
        end
    end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


if any([length(size_MX),length(size_MY),length(size_MU),length(size_MV)]>2)
    error(['Function ' 39 mfilename 39 ' is only meant to visualize arrays of' 10 '1 or 2 dimensions.'])
end

if ~isequal(size_MX,size_MY)
    error(['Position input arrays must have identical dimensions. (function:' 39 mfilename 39 ')' ])    
end

if ~isequal(size_MU,size_MV)
    error(['Wind field input arrays must have identical dimensions. (function:' 39 mfilename 39 ')' ])    
end

if ~isequal(size_MX,size_MU)
    error(['Location arrays must have the same dimensions as wind field arrays (function:' 39 mfilename 39 ')' ])    
end


xCoordsOfBarbs = [];
yCoordsOfBarbs = [];

L = prod(size_MU);


for k = 1:L
    
    [xv,yv,knots] = ge_barb_i(MX(k),MY(k),MU(k),MV(k),barbScale,hemisphere);
    
    xCoordsOfBarbs = [xv;NaN;xCoordsOfBarbs];
    yCoordsOfBarbs = [yv;NaN;yCoordsOfBarbs];

end



function [xp,yp,knots] = ge_barb_i(X,Y,U,V,s01,hemi)
% function includes local function:
% speed2knots
% calc_dir
% move_down_stalk
% open_windbarb
% add_flag
% add_whole_pennant
% add_half_pennant
% close_windbarb

% U and V must be multiplied by -1 to account 
% for the fact that windbarb always point 
% into the wind:
U = -U;
V = -V;


WindSpeed = sqrt(U.^2+V.^2);
knots = speed2knots(WindSpeed);

k5 = round(knots/5)*5;
if knots<2.5
    s02 = 0.02*s01;
    xp = [X-s02;X+s02;X+s02;X-s02;X-s02];
    yp = [Y+s02;Y+s02;Y-s02;Y-s02;Y+s02];
    return
end


% number flags
N_flags = floor(k5/50);

% number of whole pennants
N_wpenn = floor((k5-N_flags*50)/10);

% number of half pennants
N_hpenn = floor((k5-N_flags*50-N_wpenn*10)/5);


if ~exist('hemi', 'var')
    hemi = 1;
else
    if strcmp(hemi,'North') | (strcmp(hemi,'Auto') & Y>=0)
        hemi = 1;
    elseif strcmp(hemi,'South') | (strcmp(hemi,'Auto') & Y<0)
        hemi = -1;
    else
        error(['Variable ' 39 'hemi' 39 ' should be one of the following' 10,...
            'char arrays: ' 39 'North' 39 ', ' 39 'South' 39 ', or ' 39 'Auto' 39])
    end
end



d = calc_dir(U,V);
s02 = 0.15*s01;    % width of the flag(s)
s03 = 0.35*s01;    % length of the flag(s)
a_flag = tan(s02/s03);


[xp,yp] = open_windbarb(d,X,Y,s01,hemi);

for i=1:N_flags
   [xp,yp] = add_flag(d,xp,yp,s01,hemi,a_flag);
   if i==N_flags
       [xp,yp] = move_down_stalk(d,xp,yp,s01,hemi);
   end
end


for i=1:N_wpenn
    
    [xp,yp] = add_whole_pennant(d,xp,yp,s01,hemi,a_flag);
    [xp,yp] = move_down_stalk(d,xp,yp,s01,hemi);
    
end

for i=1:N_hpenn
    
    if N_flags==0 & N_wpenn==0
        [xp,yp] = move_down_stalk(d,xp,yp,s01,hemi);
    end

    [xp,yp] = add_half_pennant(d,xp,yp,s01,hemi,a_flag);
    
end

[xp,yp] = close_windbarb(d,xp,yp,s01,hemi);







%%% LOCAL FUNCTIONS FOLLOW:





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function K = speed2knots(WS)

f = 0.51; % 1 knot = 0.51 m/s

K = (1/f) * WS;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function a = calc_dir(U,V)

dy = V;
dx = U;

if dy==0 & dx == 0
    error(['Unable to determine the direction of' 10 'a zero-length vector. Function: ' 39 mfilename 39 '.'])
elseif (dy>=0) & (dx >= 0)
    if dy == 0
        dy = 1;
    end
    a = mod(atan(dx/dy),2*pi);%#
elseif (dy>=0) & (dx < 0)
    if dy == 0
        dy = 1;
    end
    a = mod(atan(dx/dy),2*pi);%#
elseif (dy<0) & (dx >= 0)
    a = mod(pi+atan(dx/dy),2*pi);%#
elseif (dy<0) & (dx < 0)
    a = mod(pi+atan(dx/dy),2*pi);%#
else
    a=NaN;%#
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [xv,yv] = move_down_stalk(d,xv,yv,s01,hemi)

s07 = 0.04*s01;    % stalks separation interval

xv = [xv;xv(end) + s07*sin(d+pi)];
yv = [yv;yv(end) + s07*cos(d+pi)];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [xv,yv] = open_windbarb(d,xv,yv,s01,hemi)

s02 = 0.02*s01;    % width of the flag pole

ax = xv(end) - s02*sin(d+hemi*0.5*pi);
ay = yv(end) - s02*cos(d+hemi*0.5*pi);

bx = ax + s01*sin(d);
by = ay + s01*cos(d);

cx = bx + 2*s02*sin(d+hemi*0.5*pi);
cy = by + 2*s02*cos(d+hemi*0.5*pi);

xv = [xv;ax;bx;cx];
yv = [yv;ay;by;cy];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [xv,yv,a_flag] = add_flag(d,xv,yv,s01,hemi,a_flag)



s03 = 0.35*s01;    % length of the flag(s)
s02 = s03*tan(a_flag);    % width of the flag(s)

fx = xv(end) + s03*sin(d+hemi*0.5*pi);
fy = yv(end) + s03*cos(d+hemi*0.5*pi);

gx = xv(end) + s02*sin(d-pi);
gy = yv(end) + s02*cos(d-pi);

xv = [xv;fx;gx];
yv = [yv;fy;gy];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [xv,yv] = add_whole_pennant(d,xv,yv,s01,hemi,a_flag)

s02 = 0.34*s01; % stalk length
s03 = 0.03*s01; % stalk width

cx = xv(end) + s03 * sin(d+hemi*pi);
cy = yv(end) + s03 * cos(d+hemi*pi);

ax = xv(end) + s02 * sin(d+hemi*(0.5*pi-a_flag));
ay = yv(end) + s02 * cos(d+hemi*(0.5*pi-a_flag));

bx = ax + s03 * sin(d+hemi*pi);
by = ay + s03 * cos(d+hemi*pi);


xv = [xv;ax;bx;cx];
yv = [yv;ay;by;cy];


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [xv,yv] = add_half_pennant(d,xv,yv,s01,hemi,a_flag)

s02 = 0.18*s01; % stalk length
s03 = 0.03*s01; % stalk width

cx = xv(end) + s03 * sin(d+hemi*pi);
cy = yv(end) + s03 * cos(d+hemi*pi);

ax = xv(end) + s02 * sin(d+hemi*(0.5*pi-a_flag));
ay = yv(end) + s02 * cos(d+hemi*(0.5*pi-a_flag));

bx = ax + s03 * sin(d+hemi*pi);
by = ay + s03 * cos(d+hemi*pi);


xv = [xv;ax;bx;cx];
yv = [yv;ay;by;cy];


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [xv,yv] = close_windbarb(d,xv,yv,s01,hemi)

s02 = 0.02*s01;    % width of the flag pole

xv = [xv;xv(1) + s02*sin(d+hemi*0.5*pi);xv(1)];
yv = [yv;yv(1) + s02*cos(d+hemi*0.5*pi);yv(1)];






