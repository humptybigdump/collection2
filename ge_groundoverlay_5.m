function [output] = ge_groundoverlay( x_max, x_min, y_max, y_min, varargin )
% % ge_groundoverlay( x_max, x_min, y_max, y_min, varargin )
%     x_max, x_min, y_max, y_min represent the east, west, north, south boundaries of
%     the groundoverlay
% AuthorizedOptions = {'id',...
%                      'idTag', ...
%                      'name',...
%                      'timeStamp', ...
%                      'timeSpanStart', ...
%                      'timeSpanStop', ...
%                      'color',...
%                      'description', ...
%                      'visibility', ...
%                      'iconHref', ...
%                      'viewBoundScale', ...
%                      'Snippet'};
                 
AuthorizedOptions = {'id',...
                     'idTag', ...
                     'name',...
                     'timeStamp', ...
                     'timeSpanStart', ...
                     'timeSpanStop', ...
                     'color',...
                     'description', ...
                     'visibility', ...
                     'iconHref', ...
                     'viewBoundScale', ...
                     'Snippet'};

for k = 1:2:length(varargin(:))
    if ~strcmp(varargin{k}, AuthorizedOptions)
        error(['Unauthorized parameter name ' 39 varargin{k} 39 ' in ' 10,...
            'parameter/value passed to ' 39 mfilename 39 '.']);
    end
end
                     
                            
if( isempty( y_max ) || isempty( y_min ) || isempty( x_max ) || isempty( x_min ) )
    error('empty coordinates passed to ge_groundoverlay(...).');
end

         id = 'default_groundoverlay';
      idTag = 'id';
       name = 'ge_groundoverlay';
description = '';
    timeStamp = ' ';
timeSpanStart = ' ';
 timeSpanStop = ' ';
    color = 'ffffffff';
 visibility = 1;
  iconHref = 'none.bmp';
  viewBoundScale = 1.0;
  Snippet = '';

v = ge_parse_pairs(varargin);

for j = 1:length(v)
    eval(v{j});
end

id_chars = [ idTag '="' id '"' ];
name_chars = [ '<name>\n' name '\n</name>\n' ];
description_chars = [ '<description>\n<![CDATA[' description ']]>\n</description>\n' ];
visibility_chars = [ '<visibility>\n' int2str(visibility) '\n</visibility>\n' ];
color_chars = [ '<color>' color '</color>\n' ];
snippet_chars = [ '<Snippet>' Snippet '</Snippet>\n' ];
iconHref_chars =  ['<href>' iconHref '</href>'];
viewBoundScale_chars = ['<viewBoundScale>' viewBoundScale '</viewBoundScale>'];

if timeStamp == ' '
    timeStamp_chars = '';
else
    timeStamp_chars = [ '<TimeStamp><when>' timeStamp '</when></TimeStamp>\n' ];
end

if timeSpanStart == ' '
    timeSpan_chars = '';
else
    if timeSpanStop == ' ' 
        timeSpan_chars = [ '<TimeSpan><begin>' timeSpanStart '</begin></TimeSpan>\n' ];
    else
        timeSpan_chars = [ '<TimeSpan><begin>' timeSpanStart '</begin><end>' timeSpanStop '</end></TimeSpan>\n' ];    
    end
        
end

%topology overlay
header=['<GroundOverlay ',id_chars,'>',...
        name_chars,...
        timeStamp_chars,...
        timeSpan_chars,...
        snippet_chars,...
        description_chars,...
        color_chars,...
        visibility_chars,...
        '<Icon>',...
            iconHref_chars,...
            viewBoundScale_chars,...
        '</Icon>',...
        '<LatLonBox>'];

		coords= [ sprintf('<north>%.6f</north>', y_max),...
                sprintf('<south>%.6f</south>', y_min),...
                sprintf('<east>%.6f</east>', x_max),...
                sprintf('<west>%.6f</west>', x_min)];
        
footer = ['</LatLonBox>',...
        '</GroundOverlay>'];
    
output = [header, coords, footer];


 
